package codegen

import (
	"fmt"
	"log"
	"path/filepath"

	. "github.com/dave/jennifer/jen"
	"github.com/endigma/toucan/schema"
)

type Generator struct {
	Schema *schema.Schema
	Output *OutputConfig
}

type OutputConfig struct {
	Path    string `validate:"required"`
	Package string `validate:"required"`
}

func NewGenerator(schema *schema.Schema, out *OutputConfig) *Generator {
	return &Generator{Output: out, Schema: schema}
}

func (gen *Generator) Generate() error {
	outFile := NewFile(gen.Output.Package)
	outFile.PackageComment("Code generated by toucan. DO NOT EDIT.")
	outFile.Line()

	// Generate resources
	for _, resource := range gen.Schema.Resources {
		if err := gen.generateResource(gen.Schema.Actor, resource); err != nil {
			log.Fatal(err)
		}
	}

	// Generate global resolver
	generateGlobalResolver(outFile.Group, gen.Schema.Resources)

	// Generate global authorizer
	generateGlobalAuthorizer(outFile.Group, gen.Schema.Actor, gen.Schema.Resources)

	err := outFile.Save(filepath.Join(gen.Output.Path, gen.Output.Package+".go"))
	if err != nil {
		return fmt.Errorf("failed to save file: %w", err)
	}

	return nil
}

func (gen *Generator) generateResource(actor schema.Model, resource schema.ResourceSchema) error {
	resourceFile := NewFile(gen.Output.Package)
	resourceFile.PackageComment("Code generated by toucan. DO NOT EDIT.")
	resourceFile.Line()

	resourceFile.Commentf("resource `%s`", resource.Name).Line()

	// Generate enums
	if err := generateResourceTypes(resourceFile.Group, resource); err != nil {
		return err
	}

	// Generate resolver
	if err := generateResourceResolver(resourceFile.Group, actor, resource); err != nil {
		return err
	}

	// Generate resolver
	if err := generateResourceAuthorizer(resourceFile.Group, actor, resource); err != nil {
		return err
	}

	err := resourceFile.Save(filepath.Join(gen.Output.Path, snake(resource.Name)+".go"))
	if err != nil {
		return fmt.Errorf("failed to save file: %w", err)
	}

	return nil
}
