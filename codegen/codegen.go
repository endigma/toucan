package codegen

import (
	"fmt"
	"path/filepath"

	. "github.com/dave/jennifer/jen"
	"github.com/endigma/toucan/schema"
)

type Generator struct {
	Schema *schema.Schema
	Output *OutputConfig
}

type OutputConfig struct {
	Path    string `validate:"required"`
	Package string `validate:"required"`
}

func NewGenerator(schema *schema.Schema, out *OutputConfig) *Generator {
	return &Generator{Output: out, Schema: schema}
}

func (gen *Generator) Generate() error {
	typesFile := gen.NewFile()
	resolverFile := gen.NewFile()
	authorizerFile := gen.NewFile()
	errorsFile := gen.NewFile()

	gen.generateAttributeEnums(typesFile)
	gen.generatePermissionEnum(typesFile)
	gen.generateAuthorizerTypes(authorizerFile)
	gen.generateResolverTypes(resolverFile)

	// Generate resources
	for _, resource := range gen.Schema.Resources {
		// Generate resolver
		gen.generateResourceResolver(resolverFile, resource)
	}

	if err := typesFile.Save(filepath.Join(gen.Output.Path + "/types.go")); err != nil {
		return fmt.Errorf("failed to save file: %w", err)
	}

	// Generate resolver
	gen.generateResolverRoot(resolverFile.Group)

	if err := resolverFile.Save(filepath.Join(gen.Output.Path + "/resolvers.go")); err != nil {
		return fmt.Errorf("failed to save file: %w", err)
	}

	// Generate authorizer
	gen.generateAuthorizerRoot(authorizerFile.Group)

	if err := authorizerFile.Save(filepath.Join(gen.Output.Path + "/authorizers.go")); err != nil {
		return fmt.Errorf("failed to save file: %w", err)
	}

	// Generate errors
	gen.generateErrors(errorsFile)

	if err := errorsFile.Save(filepath.Join(gen.Output.Path + "/errors.go")); err != nil {
		return fmt.Errorf("failed to save file: %w", err)
	}

	return nil
}

func (gen *Generator) NewFile() *File {
	resourceFile := NewFile(gen.Output.Package)
	resourceFile.PackageComment("Code generated by toucan. DO NOT EDIT.")
	resourceFile.Line()

	return resourceFile
}
