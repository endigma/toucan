package codegen

import (
	"log"

	. "github.com/dave/jennifer/jen"
	"github.com/endigma/toucan/spec"
)

type Generator struct {
	*spec.Spec
}

func NewGenerator(spec *spec.Spec) *Generator {
	return &Generator{spec}
}

func (gen *Generator) Generate() error {
	f := NewFile(gen.Output.Package)
	f.PackageComment("Code generated by toucan. DO NOT EDIT.")
	f.Line()

	// Generate resources
	for _, resource := range gen.Resources {
		if err := generateResource(f.Group, gen.Actor, resource); err != nil {
			log.Fatal(err)
		}
	}

	// Generate global resolver
	if err := generateGlobalResolver(f.Group, gen.Actor, gen.Resources); err != nil {
		log.Fatal(err)
	}

	// Generate global authorizer
	if err := generateGlobalAuthorizer(f.Group, gen.Actor, gen.Resources); err != nil {
		log.Fatal(err)
	}

	return f.Save(gen.Output.Path + gen.Output.Package + ".go")
}

func generateResource(g *Group, actor spec.QualifierSpec, resource spec.ResourceSpec) error {
	g.Commentf("resource `%s`", resource.Name).Line()

	// Generate enums
	if err := generateResourceTypes(g, resource); err != nil {
		return err
	}

	// Generate resolver
	if err := generateResourceResolver(g, actor, resource); err != nil {
		return err
	}

	// Generate resolver
	if err := generateResourceAuthorizer(g, actor, resource); err != nil {
		return err
	}

	return nil
}
