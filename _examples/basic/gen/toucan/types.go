// Code generated by toucan. DO NOT EDIT.
package toucan

import (
	"errors"
	"fmt"
	"strings"
)

type Role string

const (
	RoleGlobalAdmin      Role = "global.admin"
	RoleRepositoryOwner  Role = "repository.owner"
	RoleRepositoryEditor Role = "repository.editor"
	RoleRepositoryViewer Role = "repository.viewer"
	RoleUserAdmin        Role = "user.admin"
	RoleUserSelf         Role = "user.self"
	RoleUserViewer       Role = "user.viewer"
)

var (
	ErrInvalidRole = fmt.Errorf("not a valid Role, try [%s]", strings.Join(roleNames, ", "))
	ErrNilRole     = errors.New("value is nil")
)

var (
	roleMap = map[string]Role{
		"global.admin":      RoleGlobalAdmin,
		"repository.editor": RoleRepositoryEditor,
		"repository.owner":  RoleRepositoryOwner,
		"repository.viewer": RoleRepositoryViewer,
		"user.admin":        RoleUserAdmin,
		"user.self":         RoleUserSelf,
		"user.viewer":       RoleUserViewer,
	}
	roleNames = []string{string(RoleGlobalAdmin), string(RoleRepositoryOwner), string(RoleRepositoryEditor), string(RoleRepositoryViewer), string(RoleUserAdmin), string(RoleUserSelf), string(RoleUserViewer)}
)

func (s Role) Valid() bool {
	_, err := ParseRole(string(s))
	return err == nil
}

func ParseRole(s string) (Role, error) {
	if x, ok := roleMap[s]; ok {
		return x, nil
	}

	return "", fmt.Errorf("%s is %w", s, ErrInvalidRole)
}

type Attribute string

const (
	AttributeGlobalProfilesArePublic Attribute = "global.profiles_are_public"
	AttributeRepositoryPublic        Attribute = "repository.public"
)

var (
	ErrInvalidAttribute = fmt.Errorf("not a valid Attribute, try [%s]", strings.Join(attributeNames, ", "))
	ErrNilAttribute     = errors.New("value is nil")
)

var (
	attributeMap = map[string]Attribute{
		"global.profiles_are_public": AttributeGlobalProfilesArePublic,
		"repository.public":          AttributeRepositoryPublic,
	}
	attributeNames = []string{string(AttributeGlobalProfilesArePublic), string(AttributeRepositoryPublic)}
)

func (s Attribute) Valid() bool {
	_, err := ParseAttribute(string(s))
	return err == nil
}

func ParseAttribute(s string) (Attribute, error) {
	if x, ok := attributeMap[s]; ok {
		return x, nil
	}

	return "", fmt.Errorf("%s is %w", s, ErrInvalidAttribute)
}

type Permission string

const (
	PermissionGlobalReadAllUsers    Permission = "global.read_all_users"
	PermissionGlobalWriteAllUsers   Permission = "global.write_all_users"
	PermissionGlobalReadAllProfiles Permission = "global.read_all_profiles"
	PermissionRepositoryRead        Permission = "repository.read"
	PermissionRepositoryPush        Permission = "repository.push"
	PermissionRepositoryDelete      Permission = "repository.delete"
	PermissionRepositorySnakeCase   Permission = "repository.snake_case"
	PermissionUserRead              Permission = "user.read"
	PermissionUserWrite             Permission = "user.write"
	PermissionUserDelete            Permission = "user.delete"
)

var (
	ErrInvalidPermission = fmt.Errorf("not a valid Permission, try [%s]", strings.Join(permissionNames, ", "))
	ErrNilPermission     = errors.New("value is nil")
)

var (
	permissionMap = map[string]Permission{
		"global.read_all_profiles": PermissionGlobalReadAllProfiles,
		"global.read_all_users":    PermissionGlobalReadAllUsers,
		"global.write_all_users":   PermissionGlobalWriteAllUsers,
		"repository.delete":        PermissionRepositoryDelete,
		"repository.push":          PermissionRepositoryPush,
		"repository.read":          PermissionRepositoryRead,
		"repository.snake_case":    PermissionRepositorySnakeCase,
		"user.delete":              PermissionUserDelete,
		"user.read":                PermissionUserRead,
		"user.write":               PermissionUserWrite,
	}
	permissionNames = []string{string(PermissionGlobalReadAllUsers), string(PermissionGlobalWriteAllUsers), string(PermissionGlobalReadAllProfiles), string(PermissionRepositoryRead), string(PermissionRepositoryPush), string(PermissionRepositoryDelete), string(PermissionRepositorySnakeCase), string(PermissionUserRead), string(PermissionUserWrite), string(PermissionUserDelete)}
)

func (s Permission) Valid() bool {
	_, err := ParsePermission(string(s))
	return err == nil
}

func ParsePermission(s string) (Permission, error) {
	if x, ok := permissionMap[s]; ok {
		return x, nil
	}

	return "", fmt.Errorf("%s is %w", s, ErrInvalidPermission)
}
