// Code generated by toucan. DO NOT EDIT.
package toucan

import (
	"context"
	models "github.com/endigma/toucan/_examples/basic/models"
	decision "github.com/endigma/toucan/decision"
	conc "github.com/sourcegraph/conc"
	"strings"
)

type Authorizer interface {
	Authorize(ctx context.Context, actor *models.User, permission string, resourceType string, resource interface{}) decision.Decision
}

type AuthorizerFunc func(ctx context.Context, actor *models.User, permission string, resourceType string, resource interface{}) decision.Decision

func (af AuthorizerFunc) Authorize(ctx context.Context, actor *models.User, permission string, resourceType string, resource interface{}) decision.Decision {
	return af(ctx, actor, permission, resourceType, resource)
}

func (a authorizer) authorizeGlobal(ctx context.Context, actor *models.User, action GlobalPermission) decision.Decision {
	if !action.Valid() {
		return decision.Error(ErrInvalidGlobalPermission)
	}

	var cancel func()
	ctx, cancel = context.WithCancel(ctx)
	defer cancel()

	results := make(chan decision.Decision)

	var wg conc.WaitGroup

	switch action {
	case GlobalPermissionReadAllProfiles:
		// Source: attribute - profiles_are_public
		wg.Go(func() {
			results <- a.resolver.HasAttribute(ctx, nil, "global", "profiles_are_public")
		})

	}
	if actor != nil {
		switch action {
		case GlobalPermissionReadAllUsers:
			// Source: role - admin
			wg.Go(func() {
				results <- a.resolver.HasRole(ctx, actor, nil, "global", "admin")
			})

		case GlobalPermissionWriteAllUsers:
			// Source: role - admin
			wg.Go(func() {
				results <- a.resolver.HasRole(ctx, actor, nil, "global", "admin")
			})

		}
	}

	go func() {
		wg.Wait()
		close(results)
	}()

	var allowReason string
	var denyReasons []string
	for result := range results {
		if result.Reason == "" {
			result.Reason = "unspecified"
		}
		if result.Allow {
			cancel()
			allowReason = result.Reason
		} else {
			denyReasons = append(denyReasons, result.Reason)
		}
	}

	if allowReason != "" {
		return decision.True(allowReason)
	} else {
		result := decision.False(strings.Join(denyReasons, ", "))
		if result.Reason == "" {
			result.Reason = "unspecified"
		}
		return result
	}
}

func (a authorizer) authorizeRepository(ctx context.Context, actor *models.User, action RepositoryPermission, resource *models.Repository) decision.Decision {
	if !action.Valid() {
		return decision.Error(ErrInvalidRepositoryPermission)
	}

	if resource == nil {
		return decision.False("unmatched")
	}
	var cancel func()
	ctx, cancel = context.WithCancel(ctx)
	defer cancel()

	results := make(chan decision.Decision)

	var wg conc.WaitGroup

	switch action {
	case RepositoryPermissionRead:
		// Source: attribute - public
		wg.Go(func() {
			results <- a.resolver.HasAttribute(ctx, resource, "repository", "public")
		})

	}
	if actor != nil {
		switch action {
		case RepositoryPermissionRead:
			// Source: role - owner
			wg.Go(func() {
				results <- a.resolver.HasRole(ctx, actor, resource, "repository", "owner")
			})

			// Source: role - editor
			wg.Go(func() {
				results <- a.resolver.HasRole(ctx, actor, resource, "repository", "editor")
			})

			// Source: role - viewer
			wg.Go(func() {
				results <- a.resolver.HasRole(ctx, actor, resource, "repository", "viewer")
			})

		case RepositoryPermissionPush:
			// Source: role - owner
			wg.Go(func() {
				results <- a.resolver.HasRole(ctx, actor, resource, "repository", "owner")
			})

			// Source: role - editor
			wg.Go(func() {
				results <- a.resolver.HasRole(ctx, actor, resource, "repository", "editor")
			})

		case RepositoryPermissionDelete:
			// Source: role - owner
			wg.Go(func() {
				results <- a.resolver.HasRole(ctx, actor, resource, "repository", "owner")
			})

		case RepositoryPermissionSnakeCase:
			// Source: role - owner
			wg.Go(func() {
				results <- a.resolver.HasRole(ctx, actor, resource, "repository", "owner")
			})

		}
	}

	go func() {
		wg.Wait()
		close(results)
	}()

	var allowReason string
	var denyReasons []string
	for result := range results {
		if result.Reason == "" {
			result.Reason = "unspecified"
		}
		if result.Allow {
			cancel()
			allowReason = result.Reason
		} else {
			denyReasons = append(denyReasons, result.Reason)
		}
	}

	if allowReason != "" {
		return decision.True(allowReason)
	} else {
		result := decision.False(strings.Join(denyReasons, ", "))
		if result.Reason == "" {
			result.Reason = "unspecified"
		}
		return result
	}
}

func (a authorizer) authorizeUser(ctx context.Context, actor *models.User, action UserPermission, resource *models.User) decision.Decision {
	if !action.Valid() {
		return decision.Error(ErrInvalidUserPermission)
	}

	if resource == nil {
		return decision.False("unmatched")
	}
	var cancel func()
	ctx, cancel = context.WithCancel(ctx)
	defer cancel()

	results := make(chan decision.Decision)

	var wg conc.WaitGroup

	if actor != nil {
		switch action {
		case UserPermissionRead:
			// Source: role - admin
			wg.Go(func() {
				results <- a.resolver.HasRole(ctx, actor, resource, "user", "admin")
			})

			// Source: role - self
			wg.Go(func() {
				results <- a.resolver.HasRole(ctx, actor, resource, "user", "self")
			})

			// Source: role - viewer
			wg.Go(func() {
				results <- a.resolver.HasRole(ctx, actor, resource, "user", "viewer")
			})

		case UserPermissionWrite:
			// Source: role - admin
			wg.Go(func() {
				results <- a.resolver.HasRole(ctx, actor, resource, "user", "admin")
			})

			// Source: role - self
			wg.Go(func() {
				results <- a.resolver.HasRole(ctx, actor, resource, "user", "self")
			})

		case UserPermissionDelete:
			// Source: role - admin
			wg.Go(func() {
				results <- a.resolver.HasRole(ctx, actor, resource, "user", "admin")
			})

		}
	}

	go func() {
		wg.Wait()
		close(results)
	}()

	var allowReason string
	var denyReasons []string
	for result := range results {
		if result.Reason == "" {
			result.Reason = "unspecified"
		}
		if result.Allow {
			cancel()
			allowReason = result.Reason
		} else {
			denyReasons = append(denyReasons, result.Reason)
		}
	}

	if allowReason != "" {
		return decision.True(allowReason)
	} else {
		result := decision.False(strings.Join(denyReasons, ", "))
		if result.Reason == "" {
			result.Reason = "unspecified"
		}
		return result
	}
}

// Authorizer
type authorizer struct {
	resolver Resolver
}

func (a authorizer) Authorize(ctx context.Context, actor *models.User, permission string, resourceType string, resource any) decision.Decision {
	switch resourceType {
	case "global":
		perm, err := ParseGlobalPermission(permission)
		if err != nil {
			return decision.Error(err)
		}
		return a.authorizeGlobal(ctx, actor, perm)
	case "repository":
		perm, err := ParseRepositoryPermission(permission)
		resource, _ := resource.(*models.Repository)
		if err != nil {
			return decision.Error(err)
		}
		return a.authorizeRepository(ctx, actor, perm, resource)
	case "user":
		perm, err := ParseUserPermission(permission)
		resource, _ := resource.(*models.User)
		if err != nil {
			return decision.Error(err)
		}
		return a.authorizeUser(ctx, actor, perm, resource)
	}

	return decision.False("unmatched")
}

func NewAuthorizer(resolver Resolver) Authorizer {
	return authorizer{resolver: resolver}
}
