// Code generated by toucan. DO NOT EDIT.
package policy

import (
	"context"
	"errors"
	"fmt"
	models "github.com/endigma/toucan/_examples/basic/models"
	strcase "github.com/iancoleman/strcase"
	"strings"
)

// resource `user`

// Enum UserPermission
type UserPermission string

const (
	UserPermissionRead   UserPermission = "read"
	UserPermissionWrite  UserPermission = "write"
	UserPermissionDelete UserPermission = "delete"
)

func (s UserPermission) String() string {
	return string(s)
}

func (s UserPermission) Valid() bool {
	_, err := ParseUserPermission(string(s))
	return err == nil
}

var (
	ErrInvalidUserPermission = fmt.Errorf("not a valid userPermission, try [%s]", strings.Join(userPermissionNames, ", "))
	ErrNilUserPermission     = errors.New("value is nil")
)

var (
	userPermissionMap = map[string]UserPermission{
		"delete": UserPermissionDelete,
		"read":   UserPermissionRead,
		"write":  UserPermissionWrite,
	}
	userPermissionNames = []string{string(UserPermissionRead), string(UserPermissionWrite), string(UserPermissionDelete)}
)

func ParseUserPermission(s string) (UserPermission, error) {
	if x, ok := userPermissionMap[s]; ok {
		return x, nil
	}

	// Try to parse from snake case
	if x, ok := userPermissionMap[strcase.ToSnake(s)]; ok {
		return x, nil
	}

	return UserPermission(""), fmt.Errorf("%s is %w", s, ErrInvalidUserPermission)
}

// Resolver for resource `user`
type UserResolver interface {
	HasRoleAdmin(context context.Context, actor *models.User, resource *models.User) bool
	HasRoleSelf(context context.Context, actor *models.User, resource *models.User) bool
	HasRoleViewer(context context.Context, actor *models.User, resource *models.User) bool
	HasAttributePublic(context context.Context, resource *models.User) bool
}

// Authorizer for resource `user`
func (a Authorizer) AuthorizeUser(ctx context.Context, actor *models.User, action UserPermission, resource *models.User) bool {
	resolver := a.resolver.User()

	if !action.Valid() {
		return false
	}

	if resource != nil {
		switch action {
		case UserPermissionRead:
			if resolver.HasAttributePublic(ctx, resource) {
				return true
			}
		}
	}

	if resource != nil && actor != nil {
		switch action {
		case UserPermissionRead:
			return resolver.HasRoleAdmin(ctx, actor, resource) ||
				resolver.HasRoleSelf(ctx, actor, resource) ||
				resolver.HasRoleViewer(ctx, actor, resource)
		case UserPermissionWrite:
			return resolver.HasRoleAdmin(ctx, actor, resource) ||
				resolver.HasRoleSelf(ctx, actor, resource)
		case UserPermissionDelete:
			return resolver.HasRoleAdmin(ctx, actor, resource)
		}
	}

	return false
}
